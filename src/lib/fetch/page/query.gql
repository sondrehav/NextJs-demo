query Catalogue($path: String!) {
  catalogue(path: $path, language:"en") {
    id
    name
    path
    createdAt
    parent {
      path
      name
      components {
        id
        type
        name
        content {
          ... on SingleLineContent { text }
        }
      }
    }
    shape {
      identifier
    }
    components {
      id
      type
      name
      content {
        ... on SingleLineContent { text }
        ... on RichTextContent { json}
        ... on ParagraphCollectionContent { paragraphs { body { json } images { ...imageVariant } title { text } } }
        ... on ItemRelationsContent { items { ...links } }
        ... on ImageContent { images { ...imageVariant } firstImage { ...imageVariant } }
        ... on DatetimeContent { datetime }
        ... on BooleanContent { value }
      }
    }
    children {
      id
      name
      type
      path
      createdAt
      components {
        id
        type
        name
        content {
          ... on SingleLineContent { text }
          ... on ImageContent { firstImage { ...imageVariant } }
        }
      }
    }
  }

  commonLinks: catalogue(path: "/web-assets/common-links", language:"en") {
    components {
      id
      type
      name
      content {
        ... on ItemRelationsContent {
          items {
            id
            name
            path
            components {
              id
              type
              name
              content {
                ... on SingleLineContent {
                  text
                }
              }
            }
          }
        }
      }
    }
  }

}

fragment relation on Item {
  name
  path
  shape {
    identifier
  }
}

fragment imageVariant on Image {
  url altText variants { width height url } caption { plainText }
}

#todo: Apollo Client to prevent nested queries like this..

fragment links on Item {
  ...relation
  components {
    id
    type
    name
    content {
      ... on SingleLineContent {
        text
      }
      ... on ItemRelationsContent {
        items {
          ... on Item {
            name path components {
              id
              name
              type
              content {
                ... on SingleLineContent {
                  text
                }
              }
            }
          }
        }
      }
      ... on ImageContent { firstImage { ...imageVariant } }
    }
  }
}