directive @key(fields: String!) on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

type KeyValuePair {
  key: String!
  value: String
}

type MetaProperty {
  key: String!
  value: String
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
  totalNodes: Int!
}

scalar Datetime

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

type Query {
  _service: _Service!
  grid(id: ID!, language: String): Grid
  catalogue(
    path: String = "/"
    language: String
    version: VersionLabel = published
  ): Item
  tree(path: String = "/", language: String): [Item]
  @deprecated(
    reason: "`tree` query is deprecated and will be removed in a future release. Use the `catalogue` query instead."
  )
  tenant(language: String): Tenant
  topic(path: String!, language: String!): Topic
  topics(name: String, ancestry: [String!], language: String): [Topic!]!
  version: VersionInfo
}

type _Service {
  # The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied
  sdl: String
}

enum SortDirection {
  asc
  desc
}

union ComponentContent =
  BooleanContent
  | ComponentChoiceContent
  | ContentChunkContent
  | DatetimeContent
  | GridRelationsContent
  | ImageContent
  | ItemRelationsContent
  | LocationContent
  | NumericContent
  | ParagraphCollectionContent
  | PropertiesTableContent
  | RichTextContent
  | SelectionContent
  | SingleLineContent
  | VideoContent

enum ComponentType {
  videos
  singleLine
  selection
  richText
  propertiesTable
  paragraphCollection
  numeric
  location
  itemRelations
  images
  gridRelations
  datetime
  contentChunk
  componentChoice
  boolean
}

type Component {
  id: String!
  name: String!
  type: ComponentType!
  meta: [MetaProperty!]
  @deprecated(
    reason: "meta properties on components are no longer supported and will be removed in a future release"
  )
  metaProperty(key: String!): String
  @deprecated(
    reason: "meta properties on components are no longer supported and will be removed in a future release"
  )
  content: ComponentContent
}

type GridColumnLayout {
  colspan: Int
  rowspan: Int
}

type GridColumn {
  meta: [MetaProperty!]
  metaProperty(key: String!): String
  layout: GridColumnLayout
  itemId: ID
  itemType: String
  item: Item
}

type GridRow {
  meta: [MetaProperty!]
  metaProperty(key: String!): String
  columns: [GridColumn!]!
}

type Grid {
  id: ID!
  name: String
  language: String!
  meta: [MetaProperty!]
  metaProperty(key: String!): String
  rows: [GridRow!]!
  createdAt: Datetime
}

type ImageVariant {
  url: String!
  key: String!
  width: Int!
  height: Int
  size: Int
}

type Image {
  url: String!
  key: String!
  altText: String
  caption: RichTextContent
  meta: [MetaProperty!]
  metaProperty(key: String!): String
  variants: [ImageVariant!]
  createdAt: Datetime
}

enum ItemSortField {
  treePosition
}

type ItemVersion {
  id: ID!
  label: VersionLabel!
  createdAt: Datetime
}

interface Item {
  id: ID!
  version: ItemVersion!
  name: String
  type: String
  shape: Shape!
  language: String
  path: String
  components(ids: [String!]): [Component!]
  component(id: String!): Component
  children: [Item!]
  parent: Item
  subtree(
    before: String
    after: String
    first: Int
    last: Int
    sort: SortDirection = asc
    sortField: ItemSortField = treePosition
  ): SubtreeConnection!
  topics: [Topic!]
  relatingItems: [Item!]
  externalReference: String
  createdAt: Datetime
  updatedAt: Datetime
  publishedAt: Datetime
}

type SubtreeConnection {
  edges: [SubtreeEdge!]
  pageInfo: PageInfo!
}

type SubtreeEdge {
  cursor: String!
  node: Item!
}

enum VersionLabel {
  published
  draft
}

type Shape {
  id: ID!
  @deprecated(
    reason: "Shape ids have been deprecated in favor of human readable identifiers and will be removed in a future release."
  )
  identifier: String!
  name: String
  meta: [MetaProperty!]
  metaProperty(key: String!): String
  createdAt: Datetime
}

type TenantDefaults {
  language: String
  currency: String
}

type Tenant {
  id: ID!
  identifier: String!
  name: String
  logo: Image
  language: String
  defaults: TenantDefaults
  isTrial: Boolean
  createdAt: Datetime
}

type VatInfo {
  name: String
  percent: Float
}

type TopicItemConnection {
  edges: [TopicItemEdge!]
  pageInfo: PageInfo!
}

type TopicItemEdge {
  cursor: String!
  node: Item!
}

enum TopicItemSortField {
  createdAt
}

type Topic {
  id: ID!
  name: String!
  path: String!
  language: String
  parentId: ID
  parent: Topic
  children: [Topic!]
  items(
    before: String
    after: String
    first: Int
    last: Int
    sort: SortDirection = desc
    sortField: TopicItemSortField = createdAt
  ): TopicItemConnection!
  createdAt: Datetime
}

type VersionInfo {
  apiVersion: String!
  commitSha: String!
}

type Video {
  id: String!
  playlists: [String!]
  playlist(type: String!): String
  title: String
  thumbnails: [Image!]
}

type Document implements Item {
  id: ID!
  version: ItemVersion!
  name: String
  type: String
  shape: Shape!
  language: String
  path: String
  components(ids: [String!]): [Component!]
  component(id: String!): Component
  children: [Item!]
  parent: Item
  subtree(
    before: String
    after: String
    first: Int
    last: Int
    sort: SortDirection = asc
    sortField: ItemSortField = treePosition
  ): SubtreeConnection!
  topics: [Topic!]
  relatingItems: [Item!]
  externalReference: String
  createdAt: Datetime
  updatedAt: Datetime
  publishedAt: Datetime
}

type Folder implements Item {
  id: ID!
  version: ItemVersion!
  name: String
  type: String
  shape: Shape!
  language: String
  path: String
  components(ids: [String!]): [Component!]
  component(id: String!): Component
  children: [Item!]
  parent: Item
  subtree(
    before: String
    after: String
    first: Int
    last: Int
    sort: SortDirection = asc
    sortField: ItemSortField = treePosition
  ): SubtreeConnection!
  topics: [Topic!]
  relatingItems: [Item!]
  externalReference: String
  createdAt: Datetime
  updatedAt: Datetime
  publishedAt: Datetime
}

type ProductPriceVariant {
  identifier: String!
  name: String
  price: Float
  currency: String
}

type ProductStockLocation {
  identifier: String!
  name: String!
  meta: [KeyValuePair!]
  stock: Int
}

type ProductVariantAttribute {
  attribute: String!
  value: String
}

type ProductVariantSubscriptionMeteredVariable {
  id: ID!
  name: String!
  identifier: String!
  tiers: [ProductVariantSubscriptionPlanTier!]!
  tierType: TierType!
}

type ProductVariantSubscriptionPlanPeriod {
  id: ID!
  name: String!
  initial: ProductVariantSubscriptionPlanPricing
  recurring: ProductVariantSubscriptionPlanPricing
}

type ProductVariantSubscriptionPlanPricing {
  period: Int!
  unit: SubscriptionPeriodUnit!
  price(identifier: String = "default"): Float
  priceVariants: [ProductPriceVariant!]
  meteredVariables: [ProductVariantSubscriptionMeteredVariable!]
}

type ProductVariantSubscriptionPlanTier {
  threshold: Int!
  price(identifier: String = "default"): Float
  priceVariants: [ProductPriceVariant!]
}

type ProductVariantSubscriptionPlan {
  identifier: String!
  name: String
  periods: [ProductVariantSubscriptionPlanPeriod!]!
}

type ProductVariant {
  id: ID!
  name: String
  image: Image
  @deprecated(
    reason: "The `image` property is deprecated and will be removed in a future release. Use the `images` property instead."
  )
  images: [Image!]
  firstImage: Image
  sku: String!
  price(identifier: String = "default"): Float
  priceVariants: [ProductPriceVariant!]
  stock(identifier: String = "default"): Int
  stockLocations: [ProductStockLocation!]
  attributes: [ProductVariantAttribute]
  externalReference: String
  subscriptionPlans: [ProductVariantSubscriptionPlan!]
  isDefault: Boolean
}

type Product implements Item {
  id: ID!
  version: ItemVersion!
  name: String
  type: String
  shape: Shape!
  language: String
  path: String
  components(ids: [String!]): [Component!]
  component(id: String!): Component
  vatType: VatInfo
  isVirtual: Boolean
  isSubscriptionOnly: Boolean
  variants: [ProductVariant!]
  defaultVariant: ProductVariant
  children: [Item!]
  parent: Item
  subtree(
    before: String
    after: String
    first: Int
    last: Int
    sort: SortDirection = asc
    sortField: ItemSortField = treePosition
  ): SubtreeConnection!
  topics: [Topic!]
  relatingItems: [Item!]
  externalReference: String
  createdAt: Datetime
  updatedAt: Datetime
  publishedAt: Datetime
}

enum SubscriptionPeriodUnit {
  day
  week
  month
  year
}

enum TierType {
  volume
  graduated
}

type BooleanContent {
  value: Boolean
}

type ComponentChoiceContent {
  selectedComponent: Component!
}

type ContentChunkContent {
  chunks(componentIds: [String!]): [[Component!]!]!
}

type DatetimeContent {
  datetime: Datetime
}

type GridRelationsContent {
  grids: [Grid!]
}

type ImageContent {
  images: [Image!]
  firstImage: Image
}

type ItemRelationsContent {
  items: [Item!]
}

type LocationContent {
  lat: Float
  long: Float
}

type NumericContent {
  number: Float!
  unit: String
}

type ParagraphCollectionContent {
  paragraphs: [ParagraphContent!]
}

type ParagraphContent {
  title: SingleLineContent
  body: RichTextContent
  images: [Image!]
  videos: [Video!]
}

type PropertiesTableContent {
  sections: [PropertiesTableSection!]
}

type PropertiesTableSection {
  title: String
  properties: [PropertiesTableValue!]
}

type PropertiesTableValue {
  key: String!
  value: String
}

type RichTextContent {
  json: [JSON]
  html: [String!]
  plainText: [String!]
}

type SelectionComponentOption {
  key: String!
  value: String!
}

type SelectionContent {
  options: [SelectionComponentOption!]
}

type SingleLineContent {
  text: String
}

type VideoContent {
  videos: [Video!]
  firstVideo: Video
}
