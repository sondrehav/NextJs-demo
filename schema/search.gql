# A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
scalar DateTime

# direction to sort by
enum OrderDirection {
  ASC
  DESC
}

# field to sort by
enum OrderField {
  ITEM_NAME
  PRICE
  STOCK
}

# item type to filter by
enum ItemType {
  PRODUCT
  DOCUMENT
  FOLDER
}

enum LogicalOperator {
  OR
  AND
}

enum StockLocationsLogicalOperator {
  OR
}

type KeyValuePair {
  key: String!
  value: String!
}

interface Item {
  id: ID!
  tenantId: ID!
  type: String!
  language: String!
  name: String
  path: String!
  topics: [Topic!]!
}

type Product implements Item {
  id: ID!
  tenantId: ID!
  type: String!
  language: String!
  name: String
  path: String!
  topics: [Topic!]!
  variants: [ProductVariant!]!
  matchingVariant: ProductVariant!
}

type Folder implements Item {
  id: ID!
  tenantId: ID!
  type: String!
  language: String!
  name: String
  path: String!
  topics: [Topic!]!
}

type Document implements Item {
  id: ID!
  tenantId: ID!
  type: String!
  language: String!
  name: String
  path: String!
  topics: [Topic!]!
}

type Image {
  key: String!
  mimeType: String!
  url: String!
  altText: String
  variants: [ImageVariant!]
}

type ImageVariant {
  width: Int!
  key: String!
  url: String!
}

type PriceVariant {
  identifier: String!
  name: String
  currency: String
  price: Float
}

type StockLocation {
  identifier: String!
  name: String
  stock: Int
  meta: [KeyValuePair!]
}

type ProductVariant {
  id: ID!
  name: String!
  sku: String!
  price: Float
  priceVariants: [PriceVariant!]
  stock: Int
  stockLocations: [StockLocation!]
  isDefault: Boolean!
  attributes: [VariantAttribute!]!
  images: [Image!]
}

type Topic {
  id: String!
  name: String!
  hierarchy: String!
  path: String!
}

type VariantAttribute {
  attribute: String!
  value: String!
}

input OrderBy {
  field: OrderField!
  direction: OrderDirection!
}

input PriceRangeFilter {
  min: Float
  max: Float
}

input StockLocationsFilter {
  logicalOperator: StockLocationsLogicalOperator = OR
  locations: [String!]
  min: Int!
}

input StockFilter {
  location: String
  min: Int!
}

input TopicHierarchyFilterFields {
  value: String!
}

input TopicPathsFilterFields {
  value: String!
}

input TopicHierarchyFilterSection {
  logicalOperator: LogicalOperator = AND
  fields: [TopicHierarchyFilterFields!]!
}

input TopicHierarchyFilter {
  logicalOperator: LogicalOperator = AND
  sections: [TopicHierarchyFilterSection!]!
}

input TopicPathsFilterSection {
  logicalOperator: LogicalOperator = AND
  fields: [TopicPathsFilterFields!]!
}

input TopicPathsFilter {
  logicalOperator: LogicalOperator = AND
  sections: [TopicPathsFilterSection!]!
}

input ItemFilterFields {
  itemIds: [String!]
  productVariantIds: [String!]
  skus: [String!]
  shapeIdentifiers: [String!]
  paths: [String!]
  topicPaths: TopicPathsFilter
}

input ProductVariantsFilter {
  isDefault: Boolean
  priceRange: PriceRangeFilter
  stock: StockFilter
  stockLocations: StockLocationsFilter
  attributes: [VariantAttributeFilter!]
}

input CatalogueSearchFilter {
  searchTerm: String
  type: ItemType
  include: ItemFilterFields
  exclude: ItemFilterFields
  productVariants: ProductVariantsFilter
  priceVariant: String = "default"
  stockLocation: String = "default"
}

input VariantAttributeFilter {
  attribute: String!
  values: [String!]!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
  totalNodes: Int!
}

type CatalogueSearchConnectionEdge {
  cursor: String!
  node: Item!
}

type PriceAggregation {
  min: Float!
  max: Float!
}

type VariantAttributesAggregation {
  attribute: String!
  value: String!
  count: Int!
}

type TopicsAggregation {
  hierarchy: String!
  name: String!
  count: Int!
  path: String!
}

type CatalogueSearchAggregations {
  totalResults: Int!
  price: PriceAggregation!
  variantAttributes: [VariantAttributesAggregation!]
  topics: [TopicsAggregation!]
}

type CatalogueSearchConnection {
  aggregations: CatalogueSearchAggregations!
  pageInfo: PageInfo!
  edges: [CatalogueSearchConnectionEdge!]
}

type Query {
  search(
    language: String
    after: String
    before: String
    first: Int
    orderBy: OrderBy
    filter: CatalogueSearchFilter
  ): CatalogueSearchConnection!
}
